name                            = Catalyst-Plugin-Babelfish
author                          = Igor Mironov <grif@cpan.org>
license                         = MIT
copyright_holder                = Igor Mironov
copyright_year                  = 2014

version                         = 0.02

[Prereqs]
perl                            = 5.008009
strict                          = 0
warnings                        = 0
parent                          = 0
Carp                            = 0
Locale::Babelfish               = 0.06
Catalyst::Runtime               = 0
Modern::Perl                    = 0
utf8                            = 0

[Prereqs / TestRequires]
Test::More                      = 0.98
Test::Deep                      = 0
FindBin                         = 0
utf8                            = 0
strict                          = 0
warnings                        = 0
Catalyst::Test                  = 0

;;
[GatherDir]
include_dotfiles = 1
exclude_filename = dist.ini
exclude_filename = weaver.ini
exclude_match    = .*\.(orig|rej|bak|old|patch|gz|swp)
exclude_match    = \.git.*

[PruneCruft]
except = \.travis\.yml
;; all dot-files automatically pruned

[OurPkgVersion]

[PodWeaver]

[NextRelease]
time_zone       = UTC
format          = %-7v %{EEE MMM d HH:mm:ss yyyy ZZZ}d

[License]

[ReadmeFromPod]

[ReadmeAnyFromPod / ReadmeMdInRoot]
type     = markdown
filename = README.md
location = root

;; cpan does not index this
[MetaNoIndex]
directory = t
directory = xt
directory = eg
directory = examples
directory = corpus
package   = DB
namespace = t::lib

;; set META resources
[MetaResources]
homepage        = https://metacpan.org/release/Catalyst-Plugin-Babelfish
repository.url  = git://github.com/regru/Catalyst-Plugin-Babelfish.git
repository.web  = https://github.com/regru/Catalyst-Plugin-Babelfish
bugtracker.web  = https://github.com/regru/Catalyst-Plugin-Babelfish/issues
repository.type = git

;; add 'provides' to META
[MetaProvides::Package]
meta_noindex = 1

;; META files
[MetaYAML]
[MetaJSON]

;; t tests
[Test::Compile]
fake_home = 1

;; xt tests
[ExtraTests]
[MetaTests]
[PodSyntaxTests]
[PodCoverageTests]
[Test::Version]
[Test::ReportPrereqs]
[Test::EOL]
[Test::NoTabs]

;; build
[MakeMaker]
[Manifest]

;; release
[ConfirmRelease]
[UploadToCPAN]

;[FakeRelease]
;user = CHIM

[Git::CommitBuild]
message = build %v-%h (on %b)
release_branch = releases

[Git::Check]
allow_dirty = dist.ini
allow_dirty = README
allow_dirty = README.md
;untracked_files = die

[Git::Tag]
tag_format  = v%v
tag_message = release v%v

[Git::Commit]
